程序 = {全局语句}

全局语句 = 导入语句 | 结构体定义语句 | 结构体实现语句 | 函数定义语句 | 全局变量定义语句

导入语句 = "impt" 模块路径 ["::" 标识符 {"," 标识符}] ["as" ("标识符" | "*")] ";"
模块路径 = 标识符 { "." 标识符 }

结构体定义语句 = "struct" 标识符 "{" { 成员变量定义 } "}"
成员变量定义 = ["pub"] ["mut"] 标识符 ":" 类型 ","

结构体实现语句 = "impl" 标识符 "{" {成员函数定义} "}"
成员函数定义 = "fn" 标识符 "(" [self参数] ["," 定义参数列表] ")" ["->" 类型] 复合语句
self参数 = "self" [":" "&" "mut" 类型 | ":" "&" 类型]

函数定义语句 = "fn" 标识符 "(" [定义参数列表] ")" ["->" 类型] 复合语句

全局变量定义 = "let" ["move"] 标识符 [":" 类型] "=" 表达式 ";"

语句 = 复合语句 | 条件语句 | 返回语句 | 定义语句 | 赋值语句 | 表达式语句 | 循环语句

复合语句 = "{" {语句} "}"
条件语句 = "if" "(" 表达式 ")" 语句 ["else" 语句]
返回语句 = "ret" [表达式] ";"
定义语句 = "let" ["mut"] 标识符 [":" 类型] "=" 表达式 ";"
赋值语句 = (标识符 | 成员访问) "=" 表达式 ";"
表达式语句 = (函数调用 | 方法调用) ";"
循环语句 = 迭代器循环语句 | 条件循环语句

迭代器循环语句 = "for" "(" 标识符 "in" 表达式 ")" 语句
条件循环语句 = "while" "(" 表达式 ")" 语句

/* 表达式 */
表达式 = 字面量 | 标识符 | [模块路径 "."] 标识符 | 结构体初始化 | 函数调用 | 成员访问 | 二元运算 | 类型转换 | 括号表达式
结构体初始化 = 类型 "{" [成员初始化列表] "}"
成员初始化列表 = 标识符 ":" 表达式 {"," 标识符 ":" 表达式} [","]
函数调用 =  静态成员函数调用 | 成员函数调用 | 普通函数调用
静态成员函数调用 = [模块路径 "."] 类型 "::" 标识符 "(" [参数列表] ")"
成员函数调用 = [模块路径 "."] 标识符 "." 标识符 "(" [参数列表] ")"
普通函数调用 = [模块路径 "."] 标识符 "(" [参数列表] ")"
成员访问 = 表达式 "." 标识符
二元运算 = 表达式 运算符 表达式
括号表达式 = "(" 表达式 ")"
类型转换 = 类型 "(" 表达式 ")"
运算符 = "+" | "-" | "*" | "/" | "==" | "!=" | "<" | ">" | "<=" | ">="

参数列表 = 表达式 {"," 表达式}
定义参数列表 = 标识符 [":" 类型] ["=" 表达式] {"," 标识符 [":" 类型] ["=" 表达式]}
类型 = "i8" | "i16" | "i32" | "i64" | "f32" | "f64" | "bool" | "char" | 标识符 | 模块路径 "." 标识符  /* 自定义类型 */
模块路径 = 标识符 {"." 标识符}

字面量 = 整型字面量 | 浮点字面量 | 字符串字面量 | 布尔字面量
布尔字面量 = true | false